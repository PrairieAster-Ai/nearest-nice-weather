{
  "name": "nearest-nice-weather",
  "version": "1.0.0",
  "description": "Weather Intelligence Platform - Monorepo",
  "type": "module",
  "private": true,
  "engines": {
    "node": "20.x",
    "npm": ">=10.8.0"
  },
  "workspaces": [
    "apps/*",
    "packages/*"
  ],
  "scripts": {
    "start": "bash ./dev-startup-optimized.sh",
    "start:quick": "bash ./dev-startup-optimized.sh --quick",
    "start:clean": "bash ./dev-startup-optimized.sh --clean",
    "start:verbose": "bash ./dev-startup-optimized.sh --verbose",
    "start:no-monitor": "bash ./dev-startup-optimized.sh --no-monitor",
    "start:legacy": "bash ./scripts/unified-dev-start.sh",
    "start:pm2": "pm2 start ecosystem.config.js",
    "stop:pm2": "pm2 stop ecosystem.config.js",
    "restart:pm2": "pm2 restart ecosystem.config.js",
    "logs:pm2": "pm2 logs",
    "status:pm2": "pm2 status",
    "dev": "npm run dev:all",
    "dev:all": "concurrently \"npm run dev:redis\" \"npm run dev:web\"",
    "dev:redis": "docker compose up -d redis",
    "dev:api": "node dev-api-server.js",
    "dev:web": "npm run dev --workspace=@nearest-nice-weather/web",
    "build": "npm run build:all",
    "build:all": "npm run build:web && npm run build:api",
    "build:web": "npm run build --workspace=@nearest-nice-weather/web",
    "build:api": "echo 'API functions built on deployment'",
    "test": "npm run test:all",
    "test:all": "npm run test:backend && npm run test:web && npm run test:api && npm run test:integration",
    "test:backend": "cd tests && npm run test:database && npm run test:environment",
    "test:web": "npm run test --workspace=@nearest-nice-weather/web",
    "test:api": "jest --testPathPattern=api",
    "test:integration": "jest --testPathPattern=integration",
    "test:coverage": "cd tests && npm run test:coverage",
    "test:watch": "cd tests && npm run test:watch",
    "test:ci": "./scripts/ci-test.sh",
    "dev:test": "npm run test:watch",
    "dev:full": "npm run dev:test & npm run dev:web",
    "perf:monitor": "npm run build && npm run perf:analyze",
    "perf:analyze": "cd apps/web && npm run build:analyze",
    "perf:lighthouse": "lighthouse http://localhost:3002 --output json --output html --output-path ./reports/lighthouse",
    "test:browser": "playwright test",
    "test:smoke": "playwright test --grep @smoke --project chromium",
    "test:critical": "playwright test --grep @critical --project chromium",
    "test:fast": "playwright test --project chromium --workers 4",
    "test:parallel": "playwright test --workers 4",
    "test:mobile": "playwright test --project mobile",
    "test:all-browsers": "TEST_ALL_BROWSERS=1 playwright test",
    "test:browser:ui": "playwright test --ui",
    "test:browser:headed": "playwright test --headed",
    "test:mcp": "playwright test --ui",
    "test:debug": "playwright test --debug",
    "test:record": "playwright codegen localhost:3001",
    "test:mcp:smoke": "playwright test --grep @smoke --ui",
    "test:mcp:critical": "playwright test --grep @critical --debug",
    "test:unit": "jest",
    "test:unit:watch": "jest --watch",
    "test:unit:coverage": "jest --coverage",
    "test:performance": "playwright test tests/performance",
    "test:accessibility": "playwright test tests/accessibility",
    "test:visual": "playwright test tests/visual",
    "test:lighthouse": "lhci collect && lhci assert",
    "test:analytics": "node tests/analytics/test-dashboard.js",
    "test:dashboard": "node tests/analytics/test-dashboard.js",
    "vercel:deploy": "echo 'ðŸš€ Use VercelMCP for deployments via Claude conversations' && vercel --prod",
    "vercel:preview": "echo 'ðŸš€ Use VercelMCP for preview deployments via Claude conversations' && vercel",
    "vercel:alias": "echo 'ðŸš€ Use VercelMCP for alias management via Claude conversations' && vercel alias set",
    "vercel:logs": "echo 'ðŸš€ Use VercelMCP for log access via Claude conversations' && vercel logs",
    "vercel:env": "echo 'ðŸš€ Use VercelMCP for environment management via Claude conversations' && vercel env ls",
    "mcp:vercel:deploy": "echo 'âœ… VercelMCP: Deploy to production via Claude conversation - use conversation: \"Deploy current code to production\"'",
    "mcp:vercel:preview": "echo 'âœ… VercelMCP: Create preview deployment via Claude conversation - use conversation: \"Deploy current code to preview environment\"'",
    "mcp:vercel:status": "echo 'âœ… VercelMCP: Check deployment status via Claude conversation - use conversation: \"Show deployment status and logs\"'",
    "mcp:vercel:alias": "echo 'âœ… VercelMCP: Manage domain aliases via Claude conversation - use conversation: \"Update p.nearestniceweather.com to latest preview\"'",
    "mcp:vercel:logs": "echo 'âœ… VercelMCP: Access deployment logs via Claude conversation - use conversation: \"Show recent deployment logs\"'",
    "mcp:vercel:rollback": "echo 'âœ… VercelMCP: Rollback deployment via Claude conversation - use conversation: \"Rollback production to previous deployment\"'",
    "test:expansion": "playwright test expansion-cycle.spec.js",
    "test:expansion:headed": "playwright test expansion-cycle.spec.js --headed",
    "test:expansion:debug": "playwright test expansion-cycle.spec.js --debug",
    "qa:visual-regression": "playwright test --grep=\"visual regression\"",
    "qa:user-journeys": "playwright test --grep=\"user journey\"",
    "qa:performance": "playwright test --grep=\"performance\"",
    "qa:accessibility": "playwright test --grep=\"accessibility\"",
    "qa:cross-browser": "playwright test --project=chromium-desktop --project=firefox-desktop --project=webkit-desktop",
    "qa:mobile": "playwright test --project=mobile-chrome --project=mobile-safari",
    "qa:full-suite": "playwright test && npm run qa:generate-report",
    "qa:deployment-gate": "npm run qa:full-suite && npm run qa:business-validation",
    "qa:business-validation": "playwright test --grep=\"business model\"",
    "qa:generate-report": "node scripts/generate-qa-report.js",
    "health:visual": "node scripts/playwright-health-check.js localhost",
    "health:visual:preview": "node scripts/playwright-health-check.js preview",
    "health:visual:production": "node scripts/playwright-health-check.js production",
    "health:comprehensive": "./scripts/comprehensive-health-check.sh localhost",
    "health:comprehensive:preview": "./scripts/comprehensive-health-check.sh preview",
    "health:comprehensive:production": "./scripts/comprehensive-health-check.sh production",
    "mcp:chrome": "node ./node_modules/@nicholmikey/chrome-tools/dist/index.js",
    "mcp:memory": "npx @movibe/memory-bank-mcp --mode code --path . --folder memory-bank",
    "mcp:neon": "npx -y mcp-remote https://mcp.neon.tech/mcp",
    "memory-bank:setup-business-context": "node scripts/setup-memory-bank-context.js",
    "memory-bank:update-patterns": "node scripts/update-memory-patterns.js",
    "mcp:test-orchestration": "node scripts/test-mcp-orchestration.js",
    "mcp:health-check": "node scripts/mcp-health-check.js",
    "lint": "npm run lint:all",
    "lint:all": "npm run lint:web && npm run lint:api",
    "lint:web": "npm run lint --workspace=@nearest-nice-weather/web",
    "lint:api": "echo 'API linting integrated with deployment'",
    "type-check": "npm run type-check --workspace=@nearest-nice-weather/web",
    "deploy": "npm run deploy:all",
    "deploy:all": "npm run deploy:web && npm run deploy:api",
    "deploy:web": "npm run deploy --workspace=@nearest-nice-weather/web",
    "deploy:api": "npm run deploy --workspace=@nearest-nice-weather/api",
    "deploy:preview": "vercel",
    "deploy:production": "vercel --prod",
    "deploy:prod": "vercel --prod",
    "clean": "npm run clean:all",
    "clean:all": "rm -rf node_modules apps/*/node_modules apps/*/dist && docker compose down",
    "reset": "npm run clean:all && npm install",
    "health": "npm run health:all",
    "health:all": "curl -f http://localhost:3000 && curl -f https://www.nearestniceweather.com/api/feedback",
    "health:monitor": "node ./scripts/persistent-health-monitor.js",
    "gh:milestones": "node .github/scripts/github-manager.js milestones",
    "gh:issues": "node .github/scripts/github-manager.js issues",
    "gh:report": "node .github/scripts/github-manager.js report",
    "gh:sprint3": "node .github/scripts/github-manager.js issues 3",
    "gh:create": "node .github/scripts/github-manager.js create-issue",
    "mcp:test": "node .github/scripts/mcp-client.js test",
    "mcp:github": "docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN -e GITHUB_TOOLSETS=repos,issues,pull_requests ghcr.io/github/github-mcp-server stdio",
    "mcp:pm": "mcp-github-project-manager --token $GITHUB_TOKEN --owner PrairieAster-Ai --repo nearest-nice-weather",
    "mcp:ai": "mcp-github-project-manager --env-file .mcp/ai-env --verbose",
    "mcp:setup-ai": "bash .mcp/setup-ai.sh",
    "mcp:test-ai": "timeout 15s npm run mcp:ai || echo 'AI MCP server test completed'",
    "project:configure": "node .github/scripts/project-configurator.js configure",
    "project:report": "node .github/scripts/project-configurator.js report",
    "mvp:create": "node .github/scripts/create-accurate-mvp.js",
    "mvp:cleanup": "node .github/scripts/cleanup-issues.js",
    "validate:env": "./scripts/validate-env.sh",
    "setup": "./scripts/dev-setup.sh"
  },
  "devDependencies": {
    "@babel/core": "^7.28.0",
    "@babel/preset-env": "^7.28.0",
    "@babel/preset-react": "^7.27.1",
    "@babel/preset-typescript": "^7.27.1",
    "@jest/globals": "^30.0.5",
    "@lhci/cli": "^0.12.0",
    "@movibe/memory-bank-mcp": "^0.4.1",
    "@nicholmikey/chrome-tools": "^1.3.0",
    "@playwright/test": "^1.54.2",
    "@testing-library/jest-dom": "^6.6.4",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "axe-playwright": "^2.0.1",
    "babel-jest": "^30.1.2",
    "concurrently": "^9.0.1",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^30.0.5",
    "playwright": "^1.54.2",
    "typescript": "^5.0.0",
    "wait-on": "^8.0.1"
  },
  "dependencies": {
    "@neondatabase/serverless": "^1.0.1",
    "@octokit/graphql": "^9.0.1",
    "@octokit/rest": "^22.0.0",
    "@vercel/node": "^2.3.0",
    "cors": "^2.8.5",
    "dotenv": "^17.2.0",
    "express": "^5.1.0",
    "json-rpc-2.0": "^1.7.1",
    "leaflet": "^1.9.4",
    "node-fetch": "^3.3.2",
    "pg": "^8.16.3",
    "reveal.js": "^5.2.1",
    "ws": "^8.18.3"
  }
}
