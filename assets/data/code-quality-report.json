{
  "timestamp": "2025-08-07T17:43:22.400Z",
  "issues": {
    "critical": [],
    "high": [
      {
        "file": "apps/web/src/App.tsx",
        "issue": "Commented out useEffect for syncing debounced filters",
        "severity": "high",
        "lines": "713-728",
        "impact": "Filter persistence to localStorage is disabled",
        "recommendation": "Implement proper debounce sync without infinite loops"
      },
      {
        "file": "apps/web/src/App.tsx",
        "issue": "Commented out useEffect for applying filters",
        "severity": "high",
        "lines": "1127-1206",
        "impact": "Map centering and zoom calculations disabled",
        "recommendation": "Re-implement with stable dependencies"
      },
      {
        "severity": "high",
        "issue": "Duplicate API implementation",
        "files": [
          "dev-api-server.js",
          "apps/web/api/*.js"
        ],
        "impact": "Must maintain two separate API implementations",
        "duplicatedCode": "POI endpoints, weather integration, database queries",
        "recommendation": "Migrate to single API implementation (Vercel or Express)"
      },
      {
        "severity": "high",
        "issue": "App.tsx is too large (1300+ lines)",
        "file": "apps/web/src/App.tsx",
        "metrics": {
          "lines": 1300,
          "useEffects": 14,
          "useCallbacks": 8,
          "components": 3
        },
        "impact": "Difficult to understand, test, and modify",
        "recommendation": "Split into smaller components: MapManager, LocationManager, FilterManager"
      },
      {
        "severity": "high",
        "debt": "Disabled critical useEffects to fix infinite loops",
        "interest": "Features not working: filter persistence, map auto-centering",
        "payback": "Proper state management architecture needed"
      }
    ],
    "medium": [
      {
        "file": "apps/web/src/hooks/useLocalStorageState.ts",
        "issue": "Complex setState wrapper may cause performance issues",
        "severity": "medium",
        "lines": "45-57",
        "impact": "JSON.stringify comparison on every state update",
        "recommendation": "Consider using React.memo or useMemo for expensive comparisons"
      },
      {
        "file": "apps/web/src/App.tsx",
        "issue": "Multiple localStorage hooks creating many useEffect chains",
        "severity": "medium",
        "count": 6,
        "impact": "Each hook has its own useEffect for persistence",
        "recommendation": "Consider a centralized state management solution"
      },
      {
        "severity": "medium",
        "issue": "Repeated infinite loop debugging code",
        "files": [
          "diagnose-react-loop.js",
          "inspect-localhost-issues.js",
          "debug-api-calls.js"
        ],
        "impact": "Similar console monitoring logic in multiple files",
        "recommendation": "Create shared debugging utilities module"
      },
      {
        "severity": "medium",
        "issue": "Inline components in App.tsx",
        "components": [
          "InfoCard",
          "MapView",
          "LeafletMapContent"
        ],
        "impact": "Cannot be tested independently or reused",
        "recommendation": "Extract to separate component files"
      },
      {
        "severity": "medium",
        "issue": "Complex useEffect chains",
        "description": "Multiple interdependent useEffects creating implicit dependencies",
        "impact": "Hard to reason about data flow and side effects",
        "recommendation": "Consider state machine or explicit orchestration"
      },
      {
        "severity": "medium",
        "issue": "Multiple localStorage reads on every render",
        "description": "6+ localStorage hooks reading on mount",
        "impact": "Synchronous localStorage access blocks main thread",
        "recommendation": "Batch localStorage reads or use async storage"
      },
      {
        "severity": "medium",
        "debt": "Quick fixes without understanding root causes",
        "interest": "Similar issues likely to reoccur",
        "payback": "Document state flow and dependencies"
      },
      {
        "severity": "medium",
        "debt": "Multiple debugging scripts left in codebase",
        "interest": "Confusion about which tools to use",
        "payback": "Consolidate into development toolkit"
      }
    ],
    "low": [
      {
        "severity": "low",
        "issue": "Screenshot capture logic duplicated",
        "files": [
          "visual-location-avatar-inspection.js",
          "playwright-fab-filter-testing.js"
        ],
        "impact": "Similar Playwright setup and screenshot code",
        "recommendation": "Extract to shared Playwright utilities"
      },
      {
        "severity": "low",
        "issue": "Unoptimized map marker rendering",
        "description": "30+ markers rendered without virtualization",
        "impact": "Performance degradation with more POIs",
        "recommendation": "Implement marker clustering or viewport-based rendering"
      }
    ]
  },
  "metrics": {
    "totalIssues": 15,
    "criticalCount": 0,
    "highCount": 5,
    "mediumCount": 8,
    "lowCount": 2
  },
  "recommendations": [
    {
      "priority": 1,
      "action": "Fix filter sync useEffect without infinite loops",
      "approach": "Use useRef to track previous values and prevent unnecessary updates"
    },
    {
      "priority": 2,
      "action": "Re-enable map centering useEffect",
      "approach": "Memoize calculations and use stable references"
    },
    {
      "priority": 3,
      "action": "Create LocationManager component",
      "approach": "Extract all location-related logic and effects"
    },
    {
      "priority": 4,
      "action": "Create FilterManager component",
      "approach": "Centralize filter state and debouncing logic"
    },
    {
      "priority": 5,
      "action": "Implement proper error boundaries",
      "approach": "Catch and handle errors gracefully"
    }
  ]
}
