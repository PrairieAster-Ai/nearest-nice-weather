name: Production Deployment Monitoring

on:
  push:
    branches: [ main ]

jobs:
  deploy-and-monitor:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Pre-deployment health check
      run: |
        echo "üîç Pre-deployment verification..."
        
        # Verify production health endpoint
        curl -f https://www.nearestniceweather.com/health.json || echo "‚ö†Ô∏è Production health check failed"
        
        # Check if this is a hotfix vs feature
        if [[ "${{ github.event.head_commit.message }}" == *"HOTFIX"* ]]; then
          echo "üö® HOTFIX deployment detected - expedited process"
          echo "hotfix=true" >> $GITHUB_ENV
        fi
    
    - name: Wait for Vercel deployment
      uses: actions/github-script@v7
      with:
        script: |
          console.log('‚è≥ Waiting for Vercel deployment...');
          
          // Wait up to 5 minutes for deployment
          const maxWait = 300000; // 5 minutes
          const startTime = Date.now();
          
          while (Date.now() - startTime < maxWait) {
            try {
              const response = await fetch('https://www.nearestniceweather.com/health.json');
              const health = await response.json();
              
              if (health.version === '${{ github.sha }}') {
                console.log('‚úÖ Deployment confirmed with new version');
                return;
              }
            } catch (error) {
              console.log('‚è≥ Still waiting for deployment...');
            }
            
            await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10s
          }
          
          throw new Error('‚ùå Deployment timeout - version not updated after 5 minutes');
    
    - name: Post-deployment validation
      run: |
        echo "üß™ Post-deployment validation..."
        
        # Health check
        HEALTH=$(curl -s https://www.nearestniceweather.com/health.json)
        echo "Health: $HEALTH"
        
        # API availability
        curl -f -X POST https://www.nearestniceweather.com/api/feedback \
          -H "Content-Type: application/json" \
          -d '{"feedback":"test","rating":5,"category":"general"}' || echo "‚ùå API test failed"
        
        # Database connectivity  
        curl -f https://www.nearestniceweather.com/api/test-db || echo "‚ùå Database test failed"
        
        echo "‚úÖ Post-deployment validation complete"
    
    - name: Performance monitoring
      run: |
        echo "üìä Performance check..."
        
        # Measure page load time
        START_TIME=$(date +%s%3N)
        curl -s https://www.nearestniceweather.com > /dev/null
        END_TIME=$(date +%s%3N)
        LOAD_TIME=$((END_TIME - START_TIME))
        
        echo "Page load time: ${LOAD_TIME}ms"
        
        if [ $LOAD_TIME -gt 3000 ]; then
          echo "‚ö†Ô∏è Page load time exceeds 3s threshold"
        else
          echo "‚úÖ Page load time within acceptable range"
        fi
    
    - name: Rollback on failure
      if: failure()
      run: |
        echo "üö® Deployment failure detected - initiating rollback"
        
        # This would trigger a rollback to the previous working version
        # For now, just alert - actual rollback requires Vercel API integration
        echo "‚ùå DEPLOYMENT FAILED - Manual rollback may be required"
        echo "üîÑ Consider reverting to tag: housekeeping-complete-known-good"
    
    - name: Success notification
      if: success()
      run: |
        echo "üéâ DEPLOYMENT SUCCESSFUL"
        echo "‚úÖ Production is healthy and responding"
        echo "üöÄ Ready for customer traffic"