name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Daily at 6 AM UTC (midnight CST) - catch environment drift
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Target environment for testing'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - preview
      test_scope:
        description: 'Scope of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - api-only
        - security-only
        - performance-only
      verbose_output:
        description: 'Enable verbose test output'
        required: false
        default: false
        type: boolean

jobs:
  test-infrastructure:
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'workflow_dispatch' || 
      inputs.test_scope == 'all' || 
      inputs.test_scope == 'api-only'
    
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      API_BASE_URL: ${{ 
        github.event_name == 'workflow_dispatch' && inputs.test_environment == 'staging' && 'https://staging.nearestniceweather.com' ||
        github.event_name == 'workflow_dispatch' && inputs.test_environment == 'preview' && 'https://preview.nearestniceweather.com' ||
        'https://www.nearestniceweather.com' 
      }}
      VERBOSE_OUTPUT: ${{ github.event_name == 'workflow_dispatch' && inputs.verbose_output || false }}
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        npm install --prefix tests
    
    - name: Validate Vercel Configuration
      run: npm run test:deployment --prefix tests
    
    - name: Validate Environment Configuration
      run: npm run test:environment --prefix tests
    
    - name: Test Database Connection
      run: npm run test:database --prefix tests
      if: env.DATABASE_URL != ''
    
    - name: Test API Endpoints
      run: npm run test:api --prefix tests
    
    - name: Run Full Test Suite
      run: npm test --prefix tests
    
    - name: Check for Technical Debt
      run: |
        echo "üîç Checking for technical debt indicators..."
        
        # Check for Next.js residue in Vite app
        if find apps/web/src -name "*.tsx" -o -name "*.ts" | xargs grep -l "from \"next/" 2>/dev/null; then
          echo "‚ùå Found Next.js imports in Vite app"
          exit 1
        fi
        
        # Check for Tailwind in Material-UI app
        if grep -q "tailwindcss" apps/web/package.json 2>/dev/null; then
          echo "‚ùå Found Tailwind CSS in Material-UI app"
          exit 1
        fi
        
        # Check for debugging console.log in production code
        if find apps/web/src api -name "*.ts" -o -name "*.tsx" | xargs grep -n "console\.log" | grep -v debug | head -5; then
          echo "‚ö†Ô∏è Found console.log statements in production code"
        fi
        
        # Check for hardcoded localhost URLs
        if find apps/web/src api -name "*.ts" -o -name "*.tsx" | xargs grep -n "localhost:" | grep -v test; then
          echo "‚ö†Ô∏è Found hardcoded localhost URLs"
        fi
        
        echo "‚úÖ Technical debt check completed"

  validate-deployment:
    runs-on: ubuntu-latest
    needs: test-infrastructure
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate vercel.json syntax
      run: |
        echo "üîç Validating Vercel configuration..."
        
        # Check JSON syntax
        if ! jq empty vercel.json; then
          echo "‚ùå vercel.json has invalid JSON syntax"
          exit 1
        fi
        
        # Check for trailing commas (common issue)
        if grep -E ',\s*[}\]]' vercel.json; then
          echo "‚ùå Found trailing commas in vercel.json"
          exit 1
        fi
        
        # Check for duplicate vercel.json files
        find . -name "vercel.json" -not -path "./vercel.json" | while read file; do
          echo "‚ö†Ô∏è Found duplicate vercel.json at: $file"
        done
        
        echo "‚úÖ Vercel configuration validation passed"
    
    - name: Test API endpoints accessibility
      run: |
        echo "üîç Testing API endpoint accessibility..."
        
        # Test feedback endpoint
        if curl -s -o /dev/null -w "%{http_code}" https://www.nearestniceweather.com/api/feedback -X OPTIONS | grep -q "200"; then
          echo "‚úÖ Feedback API endpoint accessible"
        else
          echo "‚ùå Feedback API endpoint not accessible"
          exit 1
        fi
        
        # Test database setup endpoint
        if curl -s -o /dev/null -w "%{http_code}" https://www.nearestniceweather.com/api/setup-database -X POST | grep -q "200"; then
          echo "‚úÖ Setup API endpoint accessible"
        else
          echo "‚ùå Setup API endpoint not accessible"
          exit 1
        fi

  security-check:
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'workflow_dispatch' || 
      inputs.test_scope == 'all' || 
      inputs.test_scope == 'security-only'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for exposed secrets
      run: |
        echo "üîç Checking for exposed secrets and tokens..."
        
        # Check for GitHub tokens
        if grep -r "ghp_" . --exclude-dir=.git --exclude-dir=.github; then
          echo "‚ùå Found potential GitHub token"
          exit 1
        fi
        
        # Check for database URLs in code (excluding test files)
        if find . -name "*.ts" -o -name "*.js" -not -path "*/node_modules/*" -not -path "*/tests/*" -not -path "*/__tests__/*" -not -path "*/*.test.*" -not -path "*/*.spec.*" | grep -v "apps/api/__tests__" | xargs grep -l "postgresql://.*@"; then
          echo "‚ùå Found hardcoded database URLs"
          exit 1
        fi
        
        # Check for API keys
        if grep -r "api.key\|apikey\|api_key" . --exclude-dir=node_modules --exclude-dir=.git | grep -v test | grep -v example; then
          echo "‚ö†Ô∏è Found potential API keys (review manually)"
        fi
        
        echo "‚úÖ Security check completed"

  preview-deployment-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [test-infrastructure, validate-deployment]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        npm install --prefix tests
    
    - name: Wait for Vercel Preview Deployment
      uses: patrickedqvist/wait-for-vercel-preview@v1.3.1
      id: wait-for-vercel-preview
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        max_timeout: 300
    
    - name: Test Preview Deployment
      run: |
        echo "üîç Testing preview deployment at: ${{ steps.wait-for-vercel-preview.outputs.url }}"
        
        # Test health endpoint
        if curl -f "${{ steps.wait-for-vercel-preview.outputs.url }}/health.json"; then
          echo "‚úÖ Health endpoint accessible"
        else
          echo "‚ùå Health endpoint failed"
          exit 1
        fi
        
        # Test API endpoint CORS
        if curl -s -o /dev/null -w "%{http_code}" "${{ steps.wait-for-vercel-preview.outputs.url }}/api/feedback" -X OPTIONS | grep -q "200"; then
          echo "‚úÖ API CORS configured correctly"
        else
          echo "‚ùå API CORS misconfigured"
          exit 1
        fi
        
        # Test security headers
        HEADERS=$(curl -s -I "${{ steps.wait-for-vercel-preview.outputs.url }}")
        if echo "$HEADERS" | grep -q "Content-Security-Policy"; then
          echo "‚úÖ CSP headers present"
        else
          echo "‚ùå CSP headers missing"
          exit 1
        fi
        
        # Test performance (Core Web Vitals simulation)
        echo "üöÄ Testing page load performance..."
        LOAD_TIME=$(curl -s -o /dev/null -w "%{time_total}" "${{ steps.wait-for-vercel-preview.outputs.url }}")
        if (( $(echo "$LOAD_TIME < 3.0" | bc -l) )); then
          echo "‚úÖ Page loads in ${LOAD_TIME}s (< 3s target)"
        else
          echo "‚ö†Ô∏è Page loads in ${LOAD_TIME}s (> 3s target)"
        fi
    
    - name: Run API Integration Tests Against Preview
      run: |
        echo "üß™ Running API tests against preview deployment..."
        export API_BASE_URL="${{ steps.wait-for-vercel-preview.outputs.url }}"
        cd tests && npm run test:api
    
    - name: Comment PR with Test Results
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üöÄ Preview Deployment Test Results
            
            **Preview URL**: ${{ steps.wait-for-vercel-preview.outputs.url }}
            
            ‚úÖ Health endpoint accessible  
            ‚úÖ API CORS configured correctly  
            ‚úÖ Security headers present  
            ‚úÖ API integration tests passed  
            
            **Ready for review!** üéâ`
          })

  performance-monitoring:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' && (inputs.test_scope == 'all' || inputs.test_scope == 'performance-only'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Performance Baseline Check
      run: |
        echo "üöÄ Testing performance baseline..."
        
        # Test bundle size
        npm run build
        BUNDLE_SIZE=$(du -sh apps/web/dist/assets/*.js | awk '{print $1}')
        echo "Bundle size: $BUNDLE_SIZE"
        
        # Fail if bundle is over 1MB
        BUNDLE_SIZE_BYTES=$(du -sb apps/web/dist/assets/*.js | awk '{sum += $1} END {print sum}')
        if [ $BUNDLE_SIZE_BYTES -gt 1048576 ]; then
          echo "‚ùå Bundle size exceeds 1MB limit"
          exit 1
        else
          echo "‚úÖ Bundle size within limits"
        fi
        
        # Test API response times
        echo "‚è±Ô∏è Testing API response times..."
        API_URL="${{ env.API_BASE_URL || 'https://www.nearestniceweather.com' }}"
        RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" "$API_URL/health.json")
        
        if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
          echo "‚ö†Ô∏è API response time: ${RESPONSE_TIME}s (> 2s threshold)"
        else
          echo "‚úÖ API response time: ${RESPONSE_TIME}s"
        fi
    
    - name: Lighthouse Performance Audit
      uses: treosh/lighthouse-ci-action@v12
      with:
        configPath: './.github/lighthouse/ci.json'
        temporaryPublicStorage: true
        urls: |
          https://www.nearestniceweather.com
        uploadArtifacts: true
    
    - name: Report Performance Results
      if: github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          // Create performance issue if thresholds exceeded
          const title = 'üö® Performance Regression Detected'
          const body = `Performance monitoring detected potential regressions in the daily check.
          
          Please review the Lighthouse reports and bundle size metrics.`
          
          // Only create issue if performance degraded significantly
          // This would be expanded with actual threshold logic