name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-infrastructure:
    runs-on: ubuntu-latest
    
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      API_BASE_URL: https://www.nearestniceweather.com
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        npm install --prefix tests
    
    - name: Validate Vercel Configuration
      run: npm run test:deployment --prefix tests
    
    - name: Validate Environment Configuration
      run: npm run test:environment --prefix tests
    
    - name: Test Database Connection
      run: npm run test:database --prefix tests
      if: env.DATABASE_URL != ''
    
    - name: Test API Endpoints
      run: npm run test:api --prefix tests
    
    - name: Run Full Test Suite
      run: npm test --prefix tests
    
    - name: Check for Technical Debt
      run: |
        echo "üîç Checking for technical debt indicators..."
        
        # Check for Next.js residue in Vite app
        if find apps/web/src -name "*.tsx" -o -name "*.ts" | xargs grep -l "from \"next/" 2>/dev/null; then
          echo "‚ùå Found Next.js imports in Vite app"
          exit 1
        fi
        
        # Check for Tailwind in Material-UI app
        if grep -q "tailwindcss" apps/web/package.json 2>/dev/null; then
          echo "‚ùå Found Tailwind CSS in Material-UI app"
          exit 1
        fi
        
        # Check for debugging console.log in production code
        if find apps/web/src api -name "*.ts" -o -name "*.tsx" | xargs grep -n "console\.log" | grep -v debug | head -5; then
          echo "‚ö†Ô∏è Found console.log statements in production code"
        fi
        
        # Check for hardcoded localhost URLs
        if find apps/web/src api -name "*.ts" -o -name "*.tsx" | xargs grep -n "localhost:" | grep -v test; then
          echo "‚ö†Ô∏è Found hardcoded localhost URLs"
        fi
        
        echo "‚úÖ Technical debt check completed"

  validate-deployment:
    runs-on: ubuntu-latest
    needs: test-infrastructure
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate vercel.json syntax
      run: |
        echo "üîç Validating Vercel configuration..."
        
        # Check JSON syntax
        if ! jq empty vercel.json; then
          echo "‚ùå vercel.json has invalid JSON syntax"
          exit 1
        fi
        
        # Check for trailing commas (common issue)
        if grep -E ',\s*[}\]]' vercel.json; then
          echo "‚ùå Found trailing commas in vercel.json"
          exit 1
        fi
        
        # Check for duplicate vercel.json files
        find . -name "vercel.json" -not -path "./vercel.json" | while read file; do
          echo "‚ö†Ô∏è Found duplicate vercel.json at: $file"
        done
        
        echo "‚úÖ Vercel configuration validation passed"
    
    - name: Test API endpoints accessibility
      run: |
        echo "üîç Testing API endpoint accessibility..."
        
        # Test feedback endpoint
        if curl -s -o /dev/null -w "%{http_code}" https://www.nearestniceweather.com/api/feedback -X OPTIONS | grep -q "200"; then
          echo "‚úÖ Feedback API endpoint accessible"
        else
          echo "‚ùå Feedback API endpoint not accessible"
          exit 1
        fi
        
        # Test database setup endpoint
        if curl -s -o /dev/null -w "%{http_code}" https://www.nearestniceweather.com/api/setup-database -X POST | grep -q "200"; then
          echo "‚úÖ Setup API endpoint accessible"
        else
          echo "‚ùå Setup API endpoint not accessible"
          exit 1
        fi

  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for exposed secrets
      run: |
        echo "üîç Checking for exposed secrets and tokens..."
        
        # Check for GitHub tokens
        if grep -r "ghp_" . --exclude-dir=.git; then
          echo "‚ùå Found potential GitHub token"
          exit 1
        fi
        
        # Check for database URLs in code
        if find . -name "*.ts" -o -name "*.js" -not -path "*/node_modules/*" -not -path "*/test*" -not -path "*/__tests__/*" | xargs grep -l "postgresql://.*@"; then
          echo "‚ùå Found hardcoded database URLs"
          exit 1
        fi
        
        # Check for API keys
        if grep -r "api.key\|apikey\|api_key" . --exclude-dir=node_modules --exclude-dir=.git | grep -v test | grep -v example; then
          echo "‚ö†Ô∏è Found potential API keys (review manually)"
        fi
        
        echo "‚úÖ Security check completed"