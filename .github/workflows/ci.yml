# Continuous Integration Pipeline
# Nearest Nice Weather - Weather Intelligence Platform
# Optimized for team development with 10-15 technical professionals

name: 'CI/CD Pipeline'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual triggers

# Environment variables
env:
  NODE_VERSION: '20'  # LTS version for team consistency

jobs:
  # Quality Gates - Fast feedback for developers
  quality-checks:
    name: 'Quality Gates'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    - name: 'Setup Node.js'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 'Install Dependencies'
      run: |
        npm ci
        cd apps/web && npm ci

    - name: 'Lint Check'
      run: |
        cd apps/web && npm run lint

    - name: 'Type Check'
      run: |
        cd apps/web && npm run type-check

    - name: 'Build Test'
      run: |
        cd apps/web && npm run build

  # Security Scanning
  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    - name: 'Setup Node.js'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 'Security Audit'
      run: |
        npm audit --audit-level moderate
        cd apps/web && npm audit --audit-level moderate

  # Automated Testing (when tests are added)
  test-suite:
    name: 'Test Suite'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: false  # Disabled until test suite is implemented

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    - name: 'Setup Node.js'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 'Install Dependencies'
      run: |
        npm ci
        cd apps/web && npm ci

    - name: 'Run Tests'
      run: |
        cd apps/web && npm run test

  # Preview Deployment (for team validation)
  deploy-preview:
    name: 'Deploy Preview'
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan]
    if: github.event_name == 'pull_request'
    timeout-minutes: 10

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    - name: 'Setup Node.js'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 'Install Vercel CLI'
      run: npm install --global vercel@latest

    - name: 'Deploy to Preview'
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      run: |
        cd apps/web
        vercel --token=$VERCEL_TOKEN --yes

    - name: 'Comment Preview URL'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸš€ Preview deployment ready! Check the deployment logs for the URL.'
          });

  # Production Deployment (protected)
  deploy-production:
    name: 'Deploy Production'
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 15
    environment: production  # Requires approval for production deployments

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    - name: 'Setup Node.js'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 'Install Vercel CLI'
      run: npm install --global vercel@latest

    - name: 'Deploy to Production'
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      run: |
        cd apps/web
        vercel --prod --token=$VERCEL_TOKEN --yes

    - name: 'Notify Deployment Success'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸš€ Production Deployment Complete',
            body: `Production deployment completed successfully!\n\nCommit: ${context.sha}\nWorkflow: ${context.workflow}\nRun: ${context.runNumber}`
          });

  # Performance Monitoring
  performance-check:
    name: 'Performance Check'
    runs-on: ubuntu-latest
    needs: [deploy-preview]
    if: github.event_name == 'pull_request'
    timeout-minutes: 10

    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    - name: 'Performance Audit Placeholder'
      run: |
        echo "ðŸš€ Performance monitoring would run here"
        echo "Future: Lighthouse CI, Web Vitals monitoring"
        echo "Future: Bundle size analysis, load time metrics"
