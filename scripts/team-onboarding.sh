#!/bin/bash

# Fastest Team Member Onboarding Script
# Nearest Nice Weather - Weather Intelligence Platform
# Target: Complete environment setup in <15 minutes vs 2+ hours

set -e

echo "🚀 Nearest Nice Weather - Team Member Onboarding"
echo "=================================================="
echo "Target: Productive development environment in <15 minutes"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Timer function
start_time=$(date +%s)

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[✓]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

print_error() {
    echo -e "${RED}[✗]${NC} $1"
}

print_section() {
    echo -e "\n${BOLD}${BLUE}$1${NC}"
    echo "----------------------------------------"
}

# Check if required tools are installed (FAST CHECK)
check_critical_dependencies() {
    print_section "🔍 Checking Critical Dependencies"

    local missing_tools=()

    # Node.js 20+ (LTS requirement)
    if ! command -v node &> /dev/null; then
        missing_tools+=("Node.js")
        print_error "Node.js not found - install from https://nodejs.org (LTS version)"
    else
        node_version=$(node --version | sed 's/v//')
        if [[ $(echo "$node_version" | cut -d. -f1) -lt 20 ]]; then
            print_warning "Node.js $node_version detected - upgrade to v20+ LTS recommended"
        else
            print_success "Node.js $node_version (LTS compatible)"
        fi
    fi

    # npm
    if ! command -v npm &> /dev/null; then
        missing_tools+=("npm")
        print_error "npm not found - usually installed with Node.js"
    else
        print_success "npm $(npm --version)"
    fi

    # Git
    if ! command -v git &> /dev/null; then
        missing_tools+=("git")
        print_error "Git not found - install from https://git-scm.com"
    else
        print_success "Git $(git --version | awk '{print $3}')"
    fi

    # Docker (OPTIONAL - cloud development mode available)
    if ! command -v docker &> /dev/null; then
        print_warning "Docker not found - install from https://docker.com (optional for cloud-only development)"
    else
        print_success "Docker $(docker --version | awk '{print $3}' | sed 's/,//')"
    fi

    if [ ${#missing_tools[@]} -ne 0 ]; then
        print_error "Missing required tools: ${missing_tools[*]}"
        echo "Please install missing tools and run this script again."
        exit 1
    fi
}

# Super-fast dependency installation
install_dependencies_fast() {
    print_section "📦 Installing Dependencies (Optimized)"

    # Use npm ci for faster, reproducible installs
    if [ -f package-lock.json ]; then
        print_status "Using npm ci for fast, reproducible installation..."
        npm ci --silent
        print_success "Root dependencies installed (npm ci)"
    else
        print_status "No package-lock.json found, using npm install..."
        npm install --silent
        print_success "Root dependencies installed (npm install)"
    fi

    # Web app dependencies (parallel where possible)
    print_status "Installing web app dependencies..."
    cd apps/web
    if [ -f package-lock.json ]; then
        npm ci --silent
    else
        npm install --silent
    fi
    cd ../..
    print_success "Web app dependencies installed"

    # API dependencies (if exists)
    if [ -d "apps/api" ] && [ -f "apps/api/package.json" ]; then
        print_status "Installing API dependencies..."
        cd apps/api
        if [ -f package-lock.json ]; then
            npm ci --silent
        else
            npm install --silent
        fi
        cd ../..
        print_success "API dependencies installed"
    fi
}

# Environment setup with smart defaults
setup_environment_smart() {
    print_section "⚙️ Environment Configuration"

    # Smart environment file creation
    if [ ! -f .env.local ]; then
        if [ -f .env.development ]; then
            cp .env.development .env.local
            print_success "Created .env.local from development template"
        elif [ -f .env.example ]; then
            cp .env.example .env.local
            print_success "Created .env.local from example template"
            print_warning "Please configure API keys in .env.local before first run"
        else
            # Create minimal working environment
            cat > .env.local << 'EOF'
# Nearest Nice Weather - Development Environment
# Generated by team onboarding script

# Database (Neon PostgreSQL - Cloud Only) 
DATABASE_URL=postgresql://user:CHANGEME@host/db?sslmode=require  # pragma: allowlist secret

# Weather API (OpenWeather)
OPENWEATHER_API_KEY=your-api-key-here

# Development Configuration
NODE_ENV=development
EOF
            print_success "Created minimal .env.local template"
            print_warning "⚠️  CONFIGURE API KEYS: Edit .env.local with your actual API keys"
        fi
    else
        print_warning ".env.local already exists - skipping environment setup"
    fi

    # Copy environment to web app if needed
    if [ ! -f apps/web/.env ] && [ -f .env.local ]; then
        cp .env.local apps/web/.env
        print_success "Copied environment to web app"
    fi
}

# Quick health validation
validate_environment_quick() {
    print_section "🏥 Environment Health Check"

    # Test basic build process
    print_status "Testing build configuration..."
    cd apps/web
    if npm run build --silent > /dev/null 2>&1; then
        print_success "Build configuration working"
    else
        print_warning "Build test failed - may need configuration adjustments"
    fi
    cd ../..

    # Test lint configuration (should now pass with warnings)
    print_status "Testing lint configuration..."
    cd apps/web
    if npm run lint --silent > /dev/null 2>&1; then
        print_success "Lint configuration working"
    else
        print_warning "Lint warnings present - normal during development"
    fi
    cd ../..
}

# Development server quick start
start_development_environment() {
    print_section "🚀 Starting Development Environment"

    print_status "Starting development servers..."
    print_warning "Note: This will start both frontend (port 3002) and API (port 4000)"
    print_warning "Press Ctrl+C to stop servers when ready"

    echo ""
    echo "🌐 Access URLs:"
    echo "  Frontend: http://localhost:3002"
    echo "  API:      http://localhost:4000"
    echo "  Health:   http://localhost:4000/api/health"
    echo ""
    echo "📚 Quick Commands:"
    echo "  npm start           - Start all services"
    echo "  npm run dev         - Frontend only"
    echo "  npm run build       - Production build"
    echo "  npm run test        - Run tests"
    echo ""

    # Ask user if they want to start immediately
    echo -n "Start development servers now? [y/N]: "
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        print_status "Starting servers... (Press Ctrl+C to stop)"
        npm start
    else
        print_success "Environment ready! Run 'npm start' when ready to develop"
    fi
}

# Success summary
print_completion_summary() {
    end_time=$(date +%s)
    duration=$((end_time - start_time))

    echo ""
    echo "🎉${GREEN}${BOLD} ONBOARDING COMPLETE! ${NC}🎉"
    echo "======================================"
    echo "⏱️  Setup completed in ${BOLD}${duration} seconds${NC}"
    echo ""
    echo "🚀 You're ready to contribute to Nearest Nice Weather!"
    echo ""
    echo "📋 Quick Start Commands:"
    echo "  ${BOLD}npm start${NC}           - Start development environment"
    echo "  ${BOLD}npm run build${NC}       - Build for production"
    echo "  ${BOLD}npm run test${NC}        - Run test suite"
    echo "  ${BOLD}npm run lint${NC}        - Check code quality"
    echo ""
    echo "📖 Important Resources:"
    echo "  📄 README.md              - Project overview & architecture"
    echo "  📄 CLAUDE.md              - Development guidelines & commands"
    echo "  📁 documentation/         - Complete technical documentation"
    echo "  🔗 GitHub Project         - Sprint planning & issue tracking"
    echo ""
    echo "🆘 Need Help?"
    echo "  📚 docs/                  - Additional documentation"
    echo "  🐛 Report issues on GitHub"
    echo "  💬 Team communication via configured channels"
    echo ""
    print_success "Happy coding! 🌤️"
}

# Main execution flow
main() {
    check_critical_dependencies
    install_dependencies_fast
    setup_environment_smart
    validate_environment_quick
    start_development_environment
    print_completion_summary
}

# Error handling
trap 'echo -e "\n${RED}[ERROR]${NC} Onboarding interrupted. Run script again to continue."; exit 1' INT

# Run main function
main "$@"
